name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run unit tests
      run: npm run test:ci
      
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Build application
      run: npm run build

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: frontend-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright
      run: npx playwright install --with-deps
      
    - name: Build application
      run: npm run build
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Backend API Tests
  backend-tests:
    name: Backend API Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'backend/api/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./backend/api
      run: npm ci
      
    - name: Run linting
      working-directory: ./backend/api
      run: npm run lint
      
    - name: Run unit tests
      working-directory: ./backend/api
      run: npm run test:unit
      env:
        MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
        
    - name: Run integration tests
      working-directory: ./backend/api
      run: npm run test:integration
      env:
        MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/api/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # ML Service Tests
  ml-tests:
    name: ML Service Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'backend/ml/requirements-ci.txt'
        
    - name: Install dependencies
      working-directory: ./backend/ml
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
        
    - name: Skip spaCy model download
      working-directory: ./backend/ml
      run: echo "Skipping spaCy model download in CI"
      
    - name: Run linting
      working-directory: ./backend/ml
      run: |
        flake8 services/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 services/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run type checking
      working-directory: ./backend/ml
      run: mypy services/ --ignore-missing-imports
      
    - name: Run unit tests
      working-directory: ./backend/ml
      run: pytest tests/unit/ -v --cov=services --cov-report=xml
      env:
        PYTHONPATH: .
        
    - name: Run integration tests (without external APIs)
      working-directory: ./backend/ml
      run: pytest tests/integration/ -v -m "not external"
      env:
        PYTHONPATH: .
        
    - name: Upload ML coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/ml/coverage.xml
        flags: ml-service
        name: ml-service-coverage

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run npm audit (Frontend)
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Run npm audit (Backend)
      working-directory: ./backend/api
      run: npm audit --audit-level=high
      continue-on-error: true

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Build and Deploy (only on main branch)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, ml-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./backend/api
      run: npm ci
      
    - name: Install ML dependencies
      working-directory: ./backend/ml
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build frontend
      run: npm run build
      
    - name: Build backend
      working-directory: ./backend/api
      run: npm run build
      
    - name: Create deployment artifacts
      run: |
        mkdir -p deploy
        cp -r .next deploy/frontend
        cp -r backend/api/dist deploy/backend
        cp -r backend/ml deploy/ml-service
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: deploy/
        retention-days: 7

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, ml-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.frontend-tests.result == 'success' && needs.backend-tests.result == 'success' && needs.ml-tests.result == 'success' && needs.e2e-tests.result == 'success' }}
      run: echo "All tests passed successfully! ✅"
      
    - name: Notify on failure
      if: ${{ needs.frontend-tests.result == 'failure' || needs.backend-tests.result == 'failure' || needs.ml-tests.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      run: |
        echo "Some tests failed! ❌"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Backend Tests: ${{ needs.backend-tests.result }}"
        echo "ML Tests: ${{ needs.ml-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"